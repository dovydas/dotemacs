#+STARTUP: overview
#+TITLE: emacs config
#+CREATOR: dovydas@slaptavieta.lt
#+LANGUAGE: en
#+OPTIONS: num:nil
#+ATTR_HTML: :style margin-left: auto; margin-right: auto;

* Look & feel
** General
*** OS X PATH for Emacs
Initializes PATH for Emacs when running inside OS X
#+BEGIN_SRC emacs-lisp
  (when (memq window-system '(mac ns x))
    (use-package exec-path-from-shell
      :config
      (exec-path-from-shell-initialize)))
#+END_SRC
*** Transpose frame
Allows frame manipulation. C-c C-t to flip windows in frame
#+BEGIN_SRC emacs-lisp
  (use-package transpose-frame
    :bind ("C-c C-t" . transpose-frame))
#+END_SRC
** Visual
#+BEGIN_SRC emacs-lisp
  (use-package zerodark-theme
    :init
      (load-theme 'zerodark t))
#+END_SRC
** Modeline
Use spacemacs modeline with theme
# +BEGIN_SRC emacs-lisp
  (use-package spaceline
    :config
    (require 'spaceline-config)
      (setq powerline-default-separator (quote arrow))
      (spaceline-spacemacs-theme))
# +END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :init
    (setq doom-modeline-major-mode-color-icon t)
    (setq doom-modeline-github t)
    (setq doom-modeline-icon nil)
    (setq doom-modeline-height 18))
  (use-package hide-mode-line
    :hook (((completion-list-mode
             completion-in-region-mode
             neotree-mode)
            . hide-mode-line-mode)))
#+END_SRC
** Editor behaviour
*** Paren mode
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
  (setq show-paren-style 'expression)
#+END_SRC
*** Use spaces for tabs
For consistency
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC
*** Electric
Matching characters
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
                               (?\{ . ?\})
                               (?\( . ?\))
                               (?\[ . ?\])
                               (?\" . ?\")
                               (?\' . ?\')
                             ))
  (electric-pair-mode t)
#+END_SRC
*** Expand region
Expand selection region C-q
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :bind ("C-q" . er/expand-region))
#+END_SRC
*** Hungry deletion
Delete extra whitespace
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :config
      (global-hungry-delete-mode))
#+END_SRC
*** Zapping to char
A nifty little package that kills all text between your cursor and a selected character.
A lot more useful than you might think. If you wish to include the selected character in the killed region,
change =zzz-up-to-char= into =zzz-to-char=.
#+BEGIN_SRC emacs-lisp
  (use-package zzz-to-char
    :bind ("M-z" . zzz-up-to-char))
#+END_SRC
*** Jump tot character
M-s to jump to character
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :bind
      ("M-s" . avy-goto-char))
#+END_SRC
*** Following window splits
After you split a window, your focus remains in the previous one.
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)
  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
** Misc
*** Show 80 column marker
#+BEGIN_SRC emacs-lisp
  (defun prog-mode-header-line ()
    "Setup the `header-line-format' on for buffers."
    (setq header-line-format
          (list " " (make-string 79 ?-) "|")))
  (add-hook 'prog-mode-hook #'prog-mode-header-line)
;; Line and Column
(setq-default fill-column 80)
(setq column-number-mode t)
(setq line-number-mode t)
#+END_SRC
*** yes-or-no to y-or-n questions
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** Disable bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC
*** Beacon
Show cursor position when switching windows
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :config
      (beacon-mode 1))
#+END_SRC
*** Highlight current line
#+BEGIN_SRC emacs-lisp
  (when window-system (add-hook 'prog-mode-hook 'hl-line-mode))
#+END_SRC
*** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :bind (:map help-map ("C-h" . which-key-C-h-dispatch))
    :hook (after-init . which-key-mode))
#+END_SRC
** Configuration management
*** Visiting the configuration
Quickly edit =~/config.org= C-c e
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
*** Reloading the configuration
Reload configration with C-x r
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    "Reloads ~/.emacs.d/config.org at runtime"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-x r") 'config-reload)
#+END_SRC
* Utils
** Notifications
Allows notifications to be displayed using various backends
Used by pomidor
#+BEGIN_SRC emacs-lisp
  (use-package alert
    :config
    (setq alert-default-style
          (if (eq system-type 'darwin) 'osx-notifier 'libnotify)))
#+END_SRC
** Productivity
*** Pomodoro timer
#+BEGIN_SRC emacs-lisp
  (use-package pomidor
    :bind ("<f12>" . pomidor)
    :config
    (setq pomidor-sound-tick nil
          pomidor-sound-tack nil
          pomidor-sound-overwork nil))
#+END_SRC
*** Olivetti mode
Mode for writing text
#+BEGIN_SRC emacs-lisp
(use-package olivetti
  :diminish
  :bind ("<f7>" . olivetti-mode)
  :init (setq olivetti-body-width 0.618))
#+END_SRC
** Misc
#+BEGIN_SRC emacs-lisp
(use-package copyit)                    ; copy path, url, etc.
(use-package daemons)                   ; system services/daemons
(use-package diffview)                  ; side-by-side diff view
(use-package esup)                      ; Emacs startup profiler
(use-package focus)                     ; Focus on the current region
(use-package htmlize)                   ; covert to html
(use-package list-environment)
(use-package memory-usage)
(use-package tldr)
(use-package ztree)
#+END_SRC
* Search
** Ivy
Search framework for object lists (commands, buffers, autocompletion, etc)
<f6> or C-c C-r to resume last search
#+BEGIN_SRC emacs-lisp
  (use-package ivy
        :config
        (ivy-mode 1)
        (setq ivy-use-virtual-buffers t
              enable-recursive-minibuffers t
              ivy-count-format "%d/%d ")
  (global-set-key (kbd "C-c C-r") 'ivy-resume)
  (global-set-key (kbd "<f6>") 'ivy-resume))
#+END_SRC
** Improved search
Search in buffers
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :bind ("C-s" . 'swiper))
#+END_SRC
** Counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :config
    (counsel-mode 1))
#+END_SRC
** Company mode
Autocomplete
#+BEGIN_SRC emacs-lisp
  (use-package company
                  :config
                  (global-company-mode)
                  (setq company-idle-delay 1)
                  (setq company-minimum-prefix-length 2)
                  (add-hook 'after-init-hook 'global-company-mode)
                  (add-hook 'org-mode-hook #'add-pcomplete-to-capf)
                  (setq company-backends '((company-capf company-files company-elisp company-yasnippet) (company-dabbrev company-dabbrev-code)))
                  (bind-key [remap completion-at-point] #'company-complete company-mode-map)
  )
#+END_SRC
* Org mode
** Common settings
#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis " ")
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-export-with-smart-quotes t)
  (setq org-src-window-setup 'current-window)
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC
** Line wrapping
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
	    '(lambda ()
	       (visual-line-mode 1)))
#+END_SRC
** Keybindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c '") 'org-edit-src-code)
#+END_SRC
** Easy-to-add emacs-lisp template
Hitting tab after an "<el" in an org-mode file will create a template for elisp insertion.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
* Projects
Projectile is an awesome project manager, mostly because it recognizes directories
with a =.git= directory as projects and helps you manage them accordingly.
C-c p s    Switch to project
C-c p f    List files in a project
C-c p k    Kill all buffers related to current project
** Enable projectile globally
This makes sure that everything can be a project.
#+BEGIN_SRC emacs-lisp
    (use-package projectile
      :diminish
      :hook (after-init . projectile-mode)
      :init
      (setq projectile-mode-line-prefix "")
;;      (setq projectile-sort-order 'recentf)
      (setq projectile-use-git-grep t)
      :config
      ;; (projectile-update-mode-line)         ; Update mode-line at the first time
      ;; Use the faster searcher to handle project files: ripgrep `rg'.
      (when (executable-find "rg")
        (setq projectile-generic-command
              (let ((rg-cmd ""))
                (dolist (dir projectile-globally-ignored-directories)
                  (setq rg-cmd (format "%s --glob '!%s'" rg-cmd dir)))
                (concat "rg -0 --files --color=never --hidden" rg-cmd))))
      )
#+END_SRC
** Let projectile call make
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f5>") 'projectile-compile-project)
#+END_SRC
** NeoTree
Toggle NeoTree with <f8>
Will switch to current projectile project on project switch
#+BEGIN_SRC emacs-lisp
  (use-package neotree
  :init
  (neotree)
  :config
  (global-set-key [f8] 'neotree-toggle)
  ;; (setq neo-autorefresh nil)
  (setq neo-smart-open t)
  ;; projectile-switch-project (C-c p p)
  ;; move to to file root
  (setq projectile-switch-project-action 'neotree-projectile-action)
    (defun neotree-project-dir ()
      "Open NeoTree using the git root."
      (interactive)
      (let ((project-dir (projectile-project-root))
            (file-name (buffer-file-name)))
        (neotree-toggle)
        (if project-dir
            (if (neo-global--window-exists-p)
                (progn
                  (neotree-dir project-dir)
                  (neotree-find file-name)))
          (message "Could not find git project root."))))
   (global-set-key [f8] 'neotree-project-dir)
  )
#+END_SRC
** Other to try:
- https://github.com/sabof/project-explorer
- http://cedet.sourceforge.net/speedbar.shtml
- https://github.com/jrockway/eproject
* Dev
Minor, non-completion related settings and plugins for writing code.
** yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config
      (use-package yasnippet-snippets)
      (yas-global-mode 1)
      (yas-reload-all))
#+END_SRC
** flycheck
#+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :init (global-flycheck-mode))
#+END_SRC
** Company quickhelp
#+BEGIN_SRC emacs-lisp
(use-package company-quickhelp          ; Documentation popups for Company
  :defer t
  :init (add-hook 'global-company-mode-hook #'company-quickhelp-mode))
#+END_SRC
** Tools
*** ripgrep
Allows searching text with ripgrep from within Emacs
#+BEGIN_SRC emacs-lisp
  (use-package rg
      :defer t
      :config
      (rg-enable-default-bindings))
#+END_SRC
** Languages
*** PHP
#+BEGIN_SRC emacs-lisp
(use-package php-mode
    :defer t)
#+END_SRC
*** YAML
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :delight yaml-mode "YAML"
  :mode "\\.yml\\'")
#+END_SRC
*** Rust
Enable rust-mode
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :config
    (setq rust-rustfmt-bin "~/.cargo/bin/rustfmt")
    (setq rust-format-on-save t))
#+END_SRC
Enable racer completition with company
#+BEGIN_SRC emacs-lisp
  (use-package racer
    :config
    (add-hook 'rust-mode-hook #'racer-mode)
    (add-hook 'racer-mode-hook #'eldoc-mode)
    (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
    (setq company-tooltip-align-annotations t))
#+END_SRC
Cargo mode
#+BEGIN_SRC emacs-lisp
  (use-package cargo
    :config
    (add-hook 'rust-mode-hook #'cargo-minor-mode))
#+END_SRC
Fly check for rust
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-rust
    :config
    (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
#+END_SRC
*** Groovy
#+BEGIN_SRC emacs-lisp
(use-package groovy-mode
:mode "\\.groovy\\'")
#+END_SRC

*** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
;; Default to GitHub-flavored MD
:mode("\\.md$" . gfm-mode))
#+END_SRC
* SCM
** magit
Git management
#+BEGIN_SRC emacs-lisp
  (use-package magit
      :config
      (setq magit-push-always-verify nil)
      (setq git-commit-summary-max-length 50)
      :bind
      ("M-g" . magit-status))
      (setenv "SSH_ASKPASS" "git-gui--askpass")
#+END_SRC
